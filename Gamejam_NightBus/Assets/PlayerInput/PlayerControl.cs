//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/PlayerInput/PlayerControl.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControl: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControl()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControl"",
    ""maps"": [
        {
            ""name"": ""BusController"",
            ""id"": ""29ade081-895e-4f43-9ab2-17bd57daa286"",
            ""actions"": [
                {
                    ""name"": ""OpenBusController"",
                    ""type"": ""Button"",
                    ""id"": ""eb476bf0-03b0-40e6-be1c-301beeeab294"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""DriverView"",
                    ""type"": ""Button"",
                    ""id"": ""b0379045-7116-468d-b80d-065cf4e951aa"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ConfirmButton"",
                    ""type"": ""Button"",
                    ""id"": ""5afa0a49-0804-4755-90e3-0d2c49e313d4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""CancelButton"",
                    ""type"": ""Button"",
                    ""id"": ""18871821-dddb-4219-a978-c059ce13b319"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""4e1cfd14-af0a-4683-83ee-0fb5f778b640"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyBoard"",
                    ""action"": ""OpenBusController"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4f65c88f-552c-4dcc-aaa5-ad52a0708fc5"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DriverView"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0b6d87ea-cfd7-4297-b340-0e0cccf36b45"",
                    ""path"": ""<Keyboard>/j"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ConfirmButton"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a9fa1640-583d-4d95-992d-8efc7304105d"",
                    ""path"": ""<Keyboard>/k"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CancelButton"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""GameStartPhase"",
            ""id"": ""033a6f86-cba6-469f-ba0a-85e36a910d35"",
            ""actions"": [
                {
                    ""name"": ""Start"",
                    ""type"": ""Button"",
                    ""id"": ""6475f340-e088-42b1-b073-d527da1940a5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""6c6b1bd5-e970-4087-a712-2ff337f6fd75"",
                    ""path"": ""<Keyboard>/j"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Start"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""KeyBoard"",
            ""bindingGroup"": ""KeyBoard"",
            ""devices"": []
        }
    ]
}");
        // BusController
        m_BusController = asset.FindActionMap("BusController", throwIfNotFound: true);
        m_BusController_OpenBusController = m_BusController.FindAction("OpenBusController", throwIfNotFound: true);
        m_BusController_DriverView = m_BusController.FindAction("DriverView", throwIfNotFound: true);
        m_BusController_ConfirmButton = m_BusController.FindAction("ConfirmButton", throwIfNotFound: true);
        m_BusController_CancelButton = m_BusController.FindAction("CancelButton", throwIfNotFound: true);
        // GameStartPhase
        m_GameStartPhase = asset.FindActionMap("GameStartPhase", throwIfNotFound: true);
        m_GameStartPhase_Start = m_GameStartPhase.FindAction("Start", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // BusController
    private readonly InputActionMap m_BusController;
    private List<IBusControllerActions> m_BusControllerActionsCallbackInterfaces = new List<IBusControllerActions>();
    private readonly InputAction m_BusController_OpenBusController;
    private readonly InputAction m_BusController_DriverView;
    private readonly InputAction m_BusController_ConfirmButton;
    private readonly InputAction m_BusController_CancelButton;
    public struct BusControllerActions
    {
        private @PlayerControl m_Wrapper;
        public BusControllerActions(@PlayerControl wrapper) { m_Wrapper = wrapper; }
        public InputAction @OpenBusController => m_Wrapper.m_BusController_OpenBusController;
        public InputAction @DriverView => m_Wrapper.m_BusController_DriverView;
        public InputAction @ConfirmButton => m_Wrapper.m_BusController_ConfirmButton;
        public InputAction @CancelButton => m_Wrapper.m_BusController_CancelButton;
        public InputActionMap Get() { return m_Wrapper.m_BusController; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(BusControllerActions set) { return set.Get(); }
        public void AddCallbacks(IBusControllerActions instance)
        {
            if (instance == null || m_Wrapper.m_BusControllerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_BusControllerActionsCallbackInterfaces.Add(instance);
            @OpenBusController.started += instance.OnOpenBusController;
            @OpenBusController.performed += instance.OnOpenBusController;
            @OpenBusController.canceled += instance.OnOpenBusController;
            @DriverView.started += instance.OnDriverView;
            @DriverView.performed += instance.OnDriverView;
            @DriverView.canceled += instance.OnDriverView;
            @ConfirmButton.started += instance.OnConfirmButton;
            @ConfirmButton.performed += instance.OnConfirmButton;
            @ConfirmButton.canceled += instance.OnConfirmButton;
            @CancelButton.started += instance.OnCancelButton;
            @CancelButton.performed += instance.OnCancelButton;
            @CancelButton.canceled += instance.OnCancelButton;
        }

        private void UnregisterCallbacks(IBusControllerActions instance)
        {
            @OpenBusController.started -= instance.OnOpenBusController;
            @OpenBusController.performed -= instance.OnOpenBusController;
            @OpenBusController.canceled -= instance.OnOpenBusController;
            @DriverView.started -= instance.OnDriverView;
            @DriverView.performed -= instance.OnDriverView;
            @DriverView.canceled -= instance.OnDriverView;
            @ConfirmButton.started -= instance.OnConfirmButton;
            @ConfirmButton.performed -= instance.OnConfirmButton;
            @ConfirmButton.canceled -= instance.OnConfirmButton;
            @CancelButton.started -= instance.OnCancelButton;
            @CancelButton.performed -= instance.OnCancelButton;
            @CancelButton.canceled -= instance.OnCancelButton;
        }

        public void RemoveCallbacks(IBusControllerActions instance)
        {
            if (m_Wrapper.m_BusControllerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IBusControllerActions instance)
        {
            foreach (var item in m_Wrapper.m_BusControllerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_BusControllerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public BusControllerActions @BusController => new BusControllerActions(this);

    // GameStartPhase
    private readonly InputActionMap m_GameStartPhase;
    private List<IGameStartPhaseActions> m_GameStartPhaseActionsCallbackInterfaces = new List<IGameStartPhaseActions>();
    private readonly InputAction m_GameStartPhase_Start;
    public struct GameStartPhaseActions
    {
        private @PlayerControl m_Wrapper;
        public GameStartPhaseActions(@PlayerControl wrapper) { m_Wrapper = wrapper; }
        public InputAction @Start => m_Wrapper.m_GameStartPhase_Start;
        public InputActionMap Get() { return m_Wrapper.m_GameStartPhase; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GameStartPhaseActions set) { return set.Get(); }
        public void AddCallbacks(IGameStartPhaseActions instance)
        {
            if (instance == null || m_Wrapper.m_GameStartPhaseActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_GameStartPhaseActionsCallbackInterfaces.Add(instance);
            @Start.started += instance.OnStart;
            @Start.performed += instance.OnStart;
            @Start.canceled += instance.OnStart;
        }

        private void UnregisterCallbacks(IGameStartPhaseActions instance)
        {
            @Start.started -= instance.OnStart;
            @Start.performed -= instance.OnStart;
            @Start.canceled -= instance.OnStart;
        }

        public void RemoveCallbacks(IGameStartPhaseActions instance)
        {
            if (m_Wrapper.m_GameStartPhaseActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IGameStartPhaseActions instance)
        {
            foreach (var item in m_Wrapper.m_GameStartPhaseActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_GameStartPhaseActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public GameStartPhaseActions @GameStartPhase => new GameStartPhaseActions(this);
    private int m_KeyBoardSchemeIndex = -1;
    public InputControlScheme KeyBoardScheme
    {
        get
        {
            if (m_KeyBoardSchemeIndex == -1) m_KeyBoardSchemeIndex = asset.FindControlSchemeIndex("KeyBoard");
            return asset.controlSchemes[m_KeyBoardSchemeIndex];
        }
    }
    public interface IBusControllerActions
    {
        void OnOpenBusController(InputAction.CallbackContext context);
        void OnDriverView(InputAction.CallbackContext context);
        void OnConfirmButton(InputAction.CallbackContext context);
        void OnCancelButton(InputAction.CallbackContext context);
    }
    public interface IGameStartPhaseActions
    {
        void OnStart(InputAction.CallbackContext context);
    }
}
